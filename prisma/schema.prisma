// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum MainCategory {
  Flores
  Plantas
  Acessorios
  Ocasiao
  none
}

enum SubCategory {
  tipos
  tiposFlores
  tiposPlantas
  arranjos
  cores
  estacao
  local
  caracteristicas
  vasos
  outros
  calendario
  cerimonias
  momentosEspeciais
  none
}

model User {
  id           String    @id @default(uuid())
  googleId     String?   @unique
  facebookId   String?   @unique
  email        String    @unique
  role         Role      @default(USER)
  passwordHash String?
  name         String
  photo        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cart         Cart?
  wishlist     WishList?
  addresses    Address[]
  orders       Order[]
}

model Address {
  id             String   @id @default(uuid())
  completeName   String
  country        String   @default("Portugal")
  street         String
  numberAndBlock String
  zone           String
  region         String
  postal         String
  contact        String
  instructions   String?
  user           User     @relation(fields: [userId], references: [id])
  orders         Order[]
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  address     Address     @relation(fields: [addressId], references: [id])
  price       Float       @default(0)
  quantity    Int         @default(0)
  cardDetails String?
  state       String      @default("Em processamento")
  orderItems  OrderItem[]
  userId      String
  addressId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  price     Float      @default(0)
  quantity  Int        @default(0)
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishList {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  images      String[]
  price       Float
  stock       Int         @default(0)
  sales       Int         @default(0)
  active      Boolean     @default(true)
  categories  Category[]
  height      String?
  water       String?
  exposure    String?
  temperature String?
  lifespan    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishLists   WishList[]
}

model Category {
  id           String       @id @default(uuid())
  mainCategory MainCategory
  subCategory  SubCategory
  name         String       @unique
  image        String
  sales        Int          @default(0)
  header       Boolean      @default(false)
  products     Product[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}
