### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Cart {
  cartItems(cursor: CartItemWhereUniqueInput, orderBy: [CartItemOrderByInput!], skip: Int, take: Int): [CartItem!]!
  createdAt: DateTime!
  id: String!
  price: Float!
  quantity: Int!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type CartItem {
  cart: Cart!
  cartId: String!
  createdAt: DateTime!
  id: String!
  product: Product!
  productId: String!
  quantity: Int!
  updatedAt: DateTime!
}

input CartItemListRelationFilter {
  every: CartItemWhereInput
  none: CartItemWhereInput
  some: CartItemWhereInput
}

input CartItemOrderByInput {
  cartId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  updatedAt: SortOrder
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  cart: CartWhereInput
  cartId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  product: ProductWhereInput
  productId: StringFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
}

input CartItemWhereUniqueInput {
  id: String
}

input CartOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  price: SortOrder
  quantity: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CartWhereInput {
  AND: [CartWhereInput!]
  NOT: [CartWhereInput!]
  OR: [CartWhereInput!]
  cartItems: CartItemListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  price: FloatFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input CartWhereUniqueInput {
  id: String
}

type Category {
  createdAt: DateTime!
  id: String!
  image: String!
  mainCategory: MainCategory!
  name: String!
  products(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  subCategory: SubCategory!
  updatedAt: DateTime!
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  image: SortOrder
  mainCategory: SortOrder
  name: SortOrder
  subCategory: SortOrder
  updatedAt: SortOrder
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  image: StringFilter
  mainCategory: EnumMainCategoryFilter
  name: StringFilter
  products: ProductListRelationFilter
  subCategory: EnumSubCategoryFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: String
  name: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumMainCategoryFilter {
  equals: MainCategory
  in: [MainCategory!]
  not: NestedEnumMainCategoryFilter
  notIn: [MainCategory!]
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumSubCategoryFilter {
  equals: SubCategory
  in: [SubCategory!]
  not: NestedEnumSubCategoryFilter
  notIn: [SubCategory!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

enum MainCategory {
  Acessorios
  Flores
  Ocasiao
  Plantas
  none
}

type Mutation {
  changeItemQuantity(cartId: String!, cartItemId: String!, plusOrMinusOne: Int!, productId: String!): CartItem
  changeProductStatus(whereId: String!): Product
  createCartItem(cartId: String!, productId: String!, quantity: Int!): CartItem
  createCategory(image: String!, mainCategory: MainCategory!, name: String!, subCategory: SubCategory!): Category
  createProduct(categories: [String!]!, description: String!, exposure: String, height: String, images: [String!]!, lifespan: String, name: String!, price: Float!, stock: Int!, temperature: String, water: String): Product
  deleteCategory(whereId: String!): Boolean
  deleteProduct(whereId: String!): Boolean
  deleteUser(password: String): User
  editCategory(image: String, mainCategory: MainCategory, name: String, subCategory: SubCategory, whereId: String!): Category
  editProduct(categories: [String!], description: String, exposure: String, height: String, images: [String!], lifespan: String, name: String, price: Float, stock: Int, temperature: String, water: String, whereId: String!): Product
  editUser(confirmNewPassword: String, password: String, updateEmail: String, updateName: String, updatePassword: String): User
  login(email: String!, password: String!): User
  logout: Boolean
  register(confirmPassword: String!, email: String!, name: String!, password: String!): User
  removeItem(cartId: String!, cartItemId: String!, productId: String!): Boolean
  stripeCharge(amount: Int!, id: String!): Boolean
  toggleFromWishList(merge: Boolean, productId: String!, wishListId: String!): WishList
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumMainCategoryFilter {
  equals: MainCategory
  in: [MainCategory!]
  not: NestedEnumMainCategoryFilter
  notIn: [MainCategory!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumSubCategoryFilter {
  equals: SubCategory
  in: [SubCategory!]
  not: NestedEnumSubCategoryFilter
  notIn: [SubCategory!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Product {
  active: Boolean!
  cartItems(cursor: CartItemWhereUniqueInput, skip: Int, take: Int): [CartItem!]!
  categories(cursor: CategoryWhereUniqueInput, skip: Int, take: Int): [Category!]!
  createdAt: DateTime!
  description: String!
  exposure: String
  height: String
  id: String!
  images: [String!]!
  lifespan: String
  name: String!
  price: Float!
  stock: Int!
  temperature: String
  updatedAt: DateTime!
  water: String
  wishLists(cursor: WishListWhereUniqueInput, skip: Int, take: Int): [WishList!]!
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductOrderByInput {
  active: SortOrder
  createdAt: SortOrder
  description: SortOrder
  exposure: SortOrder
  height: SortOrder
  id: SortOrder
  images: SortOrder
  lifespan: SortOrder
  name: SortOrder
  price: SortOrder
  stock: SortOrder
  temperature: SortOrder
  updatedAt: SortOrder
  water: SortOrder
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  active: BoolFilter
  cartItems: CartItemListRelationFilter
  categories: CategoryListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  exposure: StringNullableFilter
  height: StringNullableFilter
  id: StringFilter
  images: StringNullableListFilter
  lifespan: StringNullableFilter
  name: StringFilter
  price: FloatFilter
  stock: IntFilter
  temperature: StringNullableFilter
  updatedAt: DateTimeFilter
  water: StringNullableFilter
  wishLists: WishListListRelationFilter
}

input ProductWhereUniqueInput {
  id: String
  name: String
}

type Query {
  cart(where: CartWhereUniqueInput!): Cart
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(cursor: CartItemWhereUniqueInput, orderBy: [CartItemOrderByInput!], skip: Int, take: Int, where: CartItemWhereInput): [CartItem!]!
  carts(cursor: CartWhereUniqueInput, orderBy: [CartOrderByInput!], skip: Int, take: Int, where: CartWhereInput): [Cart!]!
  categories(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  categoryCount: Int
  inactiveCount: Int
  me: User
  outOfStockCount: Int
  product(where: ProductWhereUniqueInput!): Product
  productCount: Int
  products(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  user(where: UserWhereUniqueInput!): User
  userCount: Int
  users(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  wishList(where: WishListWhereUniqueInput!): WishList
  wishLists(cursor: WishListWhereUniqueInput, orderBy: [WishListOrderByInput!], skip: Int, take: Int, where: WishListWhereInput): [WishList!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

enum SubCategory {
  arranjos
  calendario
  caracteristicas
  cerimonias
  cores
  estacao
  local
  momentosEspeciais
  none
  outros
  tipos
  tiposFlores
  tiposPlantas
  vasos
}

type User {
  cart: Cart
  createdAt: DateTime!
  email: String!
  facebookId: String
  googleId: String
  id: String!
  name: String!
  passwordHash: String
  photo: String
  role: Role!
  updatedAt: DateTime!
  wishlist: WishList
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  facebookId: SortOrder
  googleId: SortOrder
  id: SortOrder
  name: SortOrder
  passwordHash: SortOrder
  photo: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  cart: CartWhereInput
  createdAt: DateTimeFilter
  email: StringFilter
  facebookId: StringNullableFilter
  googleId: StringNullableFilter
  id: StringFilter
  name: StringFilter
  passwordHash: StringNullableFilter
  photo: StringNullableFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  wishlist: WishListWhereInput
}

input UserWhereUniqueInput {
  email: String
  facebookId: String
  googleId: String
  id: String
}

type WishList {
  createdAt: DateTime!
  id: String!
  products(cursor: ProductWhereUniqueInput, skip: Int, take: Int): [Product!]!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input WishListListRelationFilter {
  every: WishListWhereInput
  none: WishListWhereInput
  some: WishListWhereInput
}

input WishListOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input WishListWhereInput {
  AND: [WishListWhereInput!]
  NOT: [WishListWhereInput!]
  OR: [WishListWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  products: ProductListRelationFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input WishListWhereUniqueInput {
  id: String
}
